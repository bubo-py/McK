openapi: 3.0.0
info:
  title: Events API
  description: An API that contains events
  version: 1.0.0
servers:
  - url: http://localhost:8080/api

paths:
  /events:
    description: A path for all events
    get:
      summary: Return a list of events
      responses:
        200:
          description: A JSON array of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
      parameters:
        - in: query
          name: day
          schema:
            type: integer
          description: Return events by startTime day
        - in: query
          name: month
          schema:
            type: integer
          description: Return events by startTime month
        - in: query
          name: year
          schema:
            type: integer
          description: Return events by startTime year

    post:
      summary: Add a new event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createEvent'
      responses:
        201:
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /events/{eventId}:
    description: A path for a specified event
    get:
      summary: Return an event object based on a specified ID
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: The specified event ID is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        404:
          description: An event with the specified ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error

    put:
      summary: Update an event
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateEvent'

      responses:
        200:
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        404:
          description: Event with specified ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete an event by ID
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Event deleted
        404:
          description: Event with specified ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    description: A path for user management
    post:
      summary: Add a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    put:
      summary: Update an existing user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUser'
      responses:
        200:
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User with specified ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete an event by ID
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        204:
          description: User deleted
        404:
          description: User with specified ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  schemas:
    createEvent:
      type: object
      properties:
        name:
          type: string
          example: Onboarding Meeting
        startTime:
          type: string
          format: date-time
          example: 2022-09-14T09:00:00.000Z
        endTime:
          type: string
          format: date-time
          example: 2022-09-14T10:30:00.000Z
        description:
          type: string
          example: This meeting is a part of onboarding process
        alertTime:
          type: string
          format: date-time
          example: 2022-09-14T08:45:30.000Z
      required:
        - name
        - startTime
        - endTime

    updateEvent:
      type: object
      properties:
        name:
          type: string
          example: Onboarding Meeting
        startTime:
          type: string
          format: date-time
          example: 2022-09-14T09:00:00.000Z
        endTime:
          type: string
          format: date-time
          example: 2022-09-14T10:30:00.000Z
        description:
          type: string
          example: This meeting is a part of onboarding process
        alertTime:
          type: string
          format: date-time
          example: 2022-09-14T08:45:30.000Z

    Event:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              example: 2
          required:
            - id
        - $ref: '#/components/schemas/createEvent'

    User:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              example: 2
          required:
            - id
        - $ref: '#/components/schemas/createUser'

    createUser:
      type: object
      properties:
        login:
          type: string
          example: test-user
        password:
          type: string
          example: hello12345
        timezone:
          format: date-time
          example: 2022-09-14T10:30:00.000+5:30
      required:
        - login
        - password
        - timezone

    updateUser:
      type: object
      properties:
        login:
          type: string
          example: test-user
        password:
          type: string
          example: hello12345
        timezone:
          format: date-time
          example: 2022-09-14T10:30:00.000+5:30


    Error:
      properties:
        errorCode:
          type: integer
          example: 400
        errorDescription:
          type: string
          example: The server cannot process the request due to something that is perceived to be a client error
