// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bubo-py/McK/events/repositories (interfaces: DatabaseRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/bubo-py/McK/types"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseRepository is a mock of DatabaseRepository interface.
type MockDatabaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseRepositoryMockRecorder
}

// MockDatabaseRepositoryMockRecorder is the mock recorder for MockDatabaseRepository.
type MockDatabaseRepositoryMockRecorder struct {
	mock *MockDatabaseRepository
}

// NewMockDatabaseRepository creates a new mock instance.
func NewMockDatabaseRepository(ctrl *gomock.Controller) *MockDatabaseRepository {
	mock := &MockDatabaseRepository{ctrl: ctrl}
	mock.recorder = &MockDatabaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseRepository) EXPECT() *MockDatabaseRepositoryMockRecorder {
	return m.recorder
}

// AddEvent mocks base method.
func (m *MockDatabaseRepository) AddEvent(arg0 context.Context, arg1 types.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEvent indicates an expected call of AddEvent.
func (mr *MockDatabaseRepositoryMockRecorder) AddEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockDatabaseRepository)(nil).AddEvent), arg0, arg1)
}

// DeleteEvent mocks base method.
func (m *MockDatabaseRepository) DeleteEvent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockDatabaseRepositoryMockRecorder) DeleteEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockDatabaseRepository)(nil).DeleteEvent), arg0, arg1)
}

// GetEvent mocks base method.
func (m *MockDatabaseRepository) GetEvent(arg0 context.Context, arg1 int64) (types.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", arg0, arg1)
	ret0, _ := ret[0].(types.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockDatabaseRepositoryMockRecorder) GetEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockDatabaseRepository)(nil).GetEvent), arg0, arg1)
}

// GetEvents mocks base method.
func (m *MockDatabaseRepository) GetEvents(arg0 context.Context) ([]types.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", arg0)
	ret0, _ := ret[0].([]types.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockDatabaseRepositoryMockRecorder) GetEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockDatabaseRepository)(nil).GetEvents), arg0)
}

// GetEventsFiltered mocks base method.
func (m *MockDatabaseRepository) GetEventsFiltered(arg0 context.Context, arg1 types.Filters) ([]types.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsFiltered", arg0, arg1)
	ret0, _ := ret[0].([]types.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsFiltered indicates an expected call of GetEventsFiltered.
func (mr *MockDatabaseRepositoryMockRecorder) GetEventsFiltered(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsFiltered", reflect.TypeOf((*MockDatabaseRepository)(nil).GetEventsFiltered), arg0, arg1)
}

// UpdateEvent mocks base method.
func (m *MockDatabaseRepository) UpdateEvent(arg0 context.Context, arg1 types.Event, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockDatabaseRepositoryMockRecorder) UpdateEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockDatabaseRepository)(nil).UpdateEvent), arg0, arg1, arg2)
}
